apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: security-scan-task
  labels:
    app: microservice-demo
spec:
  description: |
    Security vulnerability scanning for container images
  params:
    - name: image-name
      type: string
      description: Container image to scan
  workspaces:
    - name: source
      description: Workspace containing the source code
  volumes:
    - name: docker-socket
      hostPath:
        path: /var/run/docker.sock
        type: Socket
  steps:
    - name: trivy-scan
      image: aquasec/trivy:latest
      workingDir: $(workspaces.source.path)
      volumeMounts:
        - name: docker-socket
          mountPath: /var/run/docker.sock
      script: |
        #!/bin/bash
        set -e
        echo "Starting security vulnerability scan with Trivy..."
        
        IMAGE_NAME="$(params.image-name)"
        echo "Scanning image: ${IMAGE_NAME}"
        
        # Create reports directory
        mkdir -p security-reports
        
        # Run comprehensive Trivy scan
        trivy image \
          --format json \
          --output security-reports/trivy-report.json \
          --severity HIGH,CRITICAL \
          --no-progress \
          "${IMAGE_NAME}"
        
        # Generate human-readable report
        trivy image \
          --format table \
          --output security-reports/trivy-report.txt \
          --severity HIGH,CRITICAL \
          --no-progress \
          "${IMAGE_NAME}"
        
        # Generate SARIF report for GitHub integration
        trivy image \
          --format sarif \
          --output security-reports/trivy-report.sarif \
          --severity HIGH,CRITICAL \
          --no-progress \
          "${IMAGE_NAME}"
        
        echo "✅ Trivy scan completed"

    - name: analyze-scan-results
      image: alpine:latest
      workingDir: $(workspaces.source.path)
      script: |
        #!/bin/bash
        set -e
        echo "Analyzing security scan results..."
        
        # Install jq for JSON parsing
        apk add --no-cache jq
        
        REPORT_FILE="security-reports/trivy-report.json"
        
        if [ ! -f "${REPORT_FILE}" ]; then
          echo "❌ Security report not found"
          exit 1
        fi
        
        # Count vulnerabilities by severity
        CRITICAL_COUNT=$(jq '[.Results[]?.Vulnerabilities[]? | select(.Severity == "CRITICAL")] | length' "${REPORT_FILE}")
        HIGH_COUNT=$(jq '[.Results[]?.Vulnerabilities[]? | select(.Severity == "HIGH")] | length' "${REPORT_FILE}")
        
        echo "🔍 Security Scan Results:"
        echo "  Critical vulnerabilities: ${CRITICAL_COUNT}"
        echo "  High vulnerabilities: ${HIGH_COUNT}"
        
        # Create summary report
        cat > security-reports/summary.txt << EOF
        🔒 Security Scan Summary
        ========================
        
        Image: $(params.image-name)
        Scan Date: $(date)
        
        Vulnerability Count:
        - Critical: ${CRITICAL_COUNT}
        - High: ${HIGH_COUNT}
        
        EOF
        
        # Determine if scan should fail the pipeline
        if [ "${CRITICAL_COUNT}" -gt 0 ]; then
          echo "❌ CRITICAL vulnerabilities found! Failing pipeline."
          echo "Please review and fix critical security issues before proceeding."
          cat security-reports/trivy-report.txt
          exit 1
        elif [ "${HIGH_COUNT}" -gt 5 ]; then
          echo "⚠️ HIGH vulnerability count (${HIGH_COUNT}) exceeds threshold (5)"
          echo "Consider fixing high-severity vulnerabilities"
          cat security-reports/trivy-report.txt
          # Don't fail for high vulnerabilities, just warn
        fi
        
        echo "✅ Security scan passed"

    - name: dockerfile-security-check
      image: hadolint/hadolint:latest-alpine
      workingDir: $(workspaces.source.path)
      script: |
        #!/bin/bash
        set -e
        echo "Checking Dockerfile security best practices..."
        
        # Create reports directory if not exists
        mkdir -p security-reports
        
        # Run Hadolint on Dockerfile
        hadolint build/Dockerfile \
          --format json \
          > security-reports/hadolint-report.json || {
          echo "⚠️ Dockerfile issues found, continuing..."
        }
        
        # Generate human-readable report
        hadolint build/Dockerfile \
          --format tty \
          > security-reports/hadolint-report.txt || {
          echo "⚠️ Dockerfile issues found"
        }
        
        echo "✅ Dockerfile security check completed"

    - name: dependency-check
      image: owasp/dependency-check:latest
      workingDir: $(workspaces.source.path)
      script: |
        #!/bin/bash
        set -e
        echo "Running OWASP Dependency Check..."
        
        # Create reports directory
        mkdir -p security-reports/dependency-check
        
        # Run dependency check on requirements.txt
        /usr/share/dependency-check/bin/dependency-check.sh \
          --project "microservice-demo" \
          --scan app/requirements.txt \
          --format JSON \
          --format HTML \
          --out security-reports/dependency-check/ || {
          echo "⚠️ Dependency check found issues, continuing..."
        }
        
        echo "✅ Dependency check completed"

    - name: generate-security-report
      image: alpine:latest
      workingDir: $(workspaces.source.path)
      script: |
        #!/bin/bash
        set -e
        echo "Generating comprehensive security report..."
        
        # Install jq for JSON processing
        apk add --no-cache jq
        
        # Create comprehensive security report
        cat > security-reports/security-summary.md << EOF
        # 🔒 Security Scan Report
        
        **Image:** \`$(params.image-name)\`  
        **Scan Date:** $(date)  
        **Pipeline:** Microservice Demo CI/CD
        
        ## 📊 Vulnerability Summary
        
        ### Container Image Scan (Trivy)
        EOF
        
        if [ -f security-reports/trivy-report.json ]; then
          CRITICAL=$(jq -r '[.Results[]?.Vulnerabilities[]? | select(.Severity == "CRITICAL")] | length' security-reports/trivy-report.json)
          HIGH=$(jq -r '[.Results[]?.Vulnerabilities[]? | select(.Severity == "HIGH")] | length' security-reports/trivy-report.json)
          
          cat >> security-reports/security-summary.md << EOF
        - 🔴 Critical: ${CRITICAL}
        - 🟠 High: ${HIGH}
        
        EOF
        fi
        
        cat >> security-reports/security-summary.md << EOF
        ### Dockerfile Best Practices (Hadolint)
        
        EOF
        
        if [ -f security-reports/hadolint-report.txt ]; then
          HADOLINT_ISSUES=$(wc -l < security-reports/hadolint-report.txt)
          echo "- Issues found: ${HADOLINT_ISSUES}" >> security-reports/security-summary.md
        fi
        
        cat >> security-reports/security-summary.md << EOF
        
        ## 📋 Available Reports
        
        - \`trivy-report.json\` - Machine-readable vulnerability report
        - \`trivy-report.txt\` - Human-readable vulnerability report
        - \`trivy-report.sarif\` - SARIF format for GitHub integration
        - \`hadolint-report.json\` - Dockerfile security analysis
        - \`dependency-check/\` - OWASP dependency analysis
        
        ## ✅ Security Recommendations
        
        1. Regularly update base images
        2. Use minimal base images (distroless when possible)
        3. Run containers as non-root users
        4. Keep dependencies up to date
        5. Monitor for new vulnerabilities
        
        EOF
        
        echo "✅ Security report generated"
        cat security-reports/security-summary.md 