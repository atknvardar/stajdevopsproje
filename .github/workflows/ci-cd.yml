name: 🚀 CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # 🧪 Test Job
  test:
    name: 🧪 Run Tests
    runs-on: ubuntu-latest
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🐍 Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: 📦 Install dependencies
        run: |
          cd app
          pip install -r requirements.txt

      - name: 🧪 Run tests
        run: |
          cd app
          python -m pytest tests/ -v --tb=short

  # 🏗️ Build Job
  build:
    name: 🏗️ Build & Push
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'push'
    permissions:
      contents: read
      packages: write

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🐳 Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: 🔐 Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: 📝 Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: 🏗️ Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./build/Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  # 🚀 Deploy Job (to staging)
  deploy-staging:
    name: 🚀 Deploy to Staging
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/main'
    environment:
      name: staging
      url: https://staging.example.com

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🔧 Deploy to staging
        run: |
          echo "🚀 Deploying to staging environment..."
          echo "Image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}"
          
          # Here you would add your deployment commands
          # For example, with kubectl, helm, or Docker Compose
          
          echo "✅ Staging deployment completed!"

  # 🧪 Integration Tests
  integration-tests:
    name: 🧪 Integration Tests
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/main'

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🐳 Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: 🏗️ Build service image for testing
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./build/Dockerfile
          load: true
          tags: stajdevops-test:latest
          cache-from: type=gha

      - name: 🚀 Start microservice
        run: |
          docker run -d \
            --name microservice-test \
            -p 8080:8080 \
            -e ENVIRONMENT=testing \
            -e LOG_LEVEL=DEBUG \
            stajdevops-test:latest

      - name: ⏳ Wait for service to be ready
        run: |
          echo "Waiting for service to start..."
          timeout 60 bash -c 'until curl -f http://localhost:8080/healthz; do sleep 2; done'
          echo "Service is ready!"

      - name: 🧪 Run integration tests
        run: |
          echo "🔍 Testing health endpoint..."
          curl -f http://localhost:8080/healthz
          
          echo "🔍 Testing readiness endpoint..."
          curl -f http://localhost:8080/ready
          
          echo "🔍 Testing API endpoints..."
          curl -f "http://localhost:8080/api/v1/hello?name=CI"
          
          echo "🔍 Testing metrics endpoint..."
          curl -f http://localhost:8080/metrics
          
          echo "🔍 Testing root endpoint..."
          curl -f http://localhost:8080/
          
          echo "✅ All integration tests passed!"

      - name: 📋 Show service logs (if tests fail)
        if: failure()
        run: |
          echo "=== Service Logs ==="
          docker logs microservice-test

      - name: 🧹 Cleanup
        if: always()
        run: |
          docker stop microservice-test || true
          docker rm microservice-test || true

  # 🏭 Production Deploy (manual approval)
  deploy-production:
    name: 🏭 Deploy to Production
    runs-on: ubuntu-latest
    needs: integration-tests
    if: github.ref == 'refs/heads/main'
    environment:
      name: production
      url: https://api.example.com

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🚀 Deploy to production
        run: |
          echo "🏭 Deploying to production environment..."
          echo "Image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}"
          
          # Production deployment commands would go here
          # This should include:
          # - Blue/green deployment
          # - Health checks
          # - Rollback capability
          
          echo "✅ Production deployment completed!"

      - name: 📢 Notify deployment
        run: |
          echo "🎉 Successfully deployed to production!"
          echo "Version: ${{ github.sha }}"
          echo "Timestamp: $(date)" 